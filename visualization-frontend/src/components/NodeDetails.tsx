import * as React from 'react';

import '../styles/NodeDetails.css';
import Sortable from 'react-sortablejs';
import { Clause } from '../model/unit';
import { Literal } from '../model/literal';
import SatNode from '../model/sat-node';

type Props = {
    node: any,
    PobLemmasMap: {},
    ExprMap: {},
    layout: string,
    expr_layout: "SMT"|"JSON"
};

export default class NodeDetails extends React.Component<Props, {}> {

    keep = false; // hack to skip each second event generated by Sortable


    type_map = {
        "EQUALS": "= ",
        "PLUS": "+ ",
        "TIMES": "* ",
        "LT": "< ",
        "LE": "<= ",
        "GT": "> ",
        "GE": ">= ",
        "SYMBOL": "",
        "0_REAL_CONSTANT": ""
    }

    node_to_string(n: Object, is_root: Boolean):string{
        let result = ""
        let args = ""
        const nl = is_root?"\n":""
        //build args 
        if (Array.isArray(n["content"])){
            for(const arg of n["content"]){
                args+=this.node_to_string(arg, false)+nl
            }
        }else{
            args+=n["content"]
        }
        //build node
        if (n["type"] in this.type_map){
            if(this.type_map[n["type"]]==""){
                result = " "+ args
            }else{
                result = "(" + this.type_map[n["type"]] + args + ")"
            }
        }else{
            result = "(" + n["type"] + nl + args + ")"
        }
        return result
    }

    render() {
        let additional_info ="type:" + this.props.node.event_type + " level:" + this.props.node.level
        let lemma_list = new Array();
        if(this.props.node.event_type == "EType.EXP_POB"){
            lemma_list.push(<h2 key ="lemma-title"> Lemmas summarization </h2>)
            if(this.props.node.exprID in this.props.PobLemmasMap){
                let lemmas = this.props.PobLemmasMap[this.props.node.exprID]
                for (const lemma of lemmas){
                    lemma_list.push(<h3 key={"lemma-header-"+ lemma[0]}>ExprID: {lemma[0]}, From: {lemma[1]} to {lemma[2]}</h3>)
                    lemma_list.push(<pre key={"lemma-expr-"+lemma[0]}>{this.props.ExprMap[lemma[0]]}</pre>)
                }
            }
        }

        let expr = ""
        if(this.props.expr_layout=="SMT"){
            expr = this.props.node.expr
        }else{
            /* expr = JSON.stringify(this.props.node.ast_json, null, 2); */
            if(this.props.node.ast_json){
                expr += this.node_to_string(this.props.node.ast_json, true);
            }
        }

        return (
            <div >
                <section className= { 'component-node-details details-top'} >
                <article>
                <h2>Node <strong>{this.props.node.nodeID}, </strong>Expr < strong > { this.props.node.exprID } </strong>, Parent <strong> {this.props.node.pobID}  </strong></h2 >
                <h3>{additional_info}</h3>
                <pre>{expr}</pre>
                </article>
                </section>
                <section className= { 'component-node-details details-bottom'} >
                    <article>
                        {lemma_list}
                    </article>
                </section>
            </div>
        );
    }

}
